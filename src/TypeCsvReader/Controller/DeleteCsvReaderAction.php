<?php

/**
 * This file is generated by SlayerBirden\DFCodeGeneration
 */

declare(strict_types=1);

namespace SlayerBirden\DataFlowServer\TypeCsvReader\Controller;

use Doctrine\ORM\ORMException;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;
use Psr\Log\LoggerInterface;
use SlayerBirden\DataFlowServer\Doctrine\Middleware\ResourceMiddlewareInterface;
use SlayerBirden\DataFlowServer\Doctrine\Persistence\EntityManagerRegistry;
use SlayerBirden\DataFlowServer\Stdlib\ResponseFactory;
use SlayerBirden\DataFlowServer\TypeCsvReader\Entities\CsvReader;
use Zend\Hydrator\HydratorInterface;

final class DeleteCsvReaderAction implements MiddlewareInterface
{
    /** @var HydratorInterface */
    private $hydrator;

    /** @var LoggerInterface */
    private $logger;

    /** @var EntityManagerRegistry */
    private $managerRegistry;

    public function __construct(EntityManagerRegistry $managerRegistry, HydratorInterface $hydrator, LoggerInterface $logger)
    {
        $this->managerRegistry = $managerRegistry;
        $this->hydrator = $hydrator;
        $this->logger = $logger;
    }

    /**
     * @inheritdoc
     * @throws ORMException
     */
    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        $entity = $request->getAttribute(ResourceMiddlewareInterface::DATA_RESOURCE);
        $em = $this->managerRegistry->getManagerForClass(CsvReader::class);
        $em->remove($entity);
        $em->flush();
        return (new ResponseFactory())('CsvReader deleted successfully', 200, 'csv_reader',
           $this->hydrator->extract($entity));
    }
}
