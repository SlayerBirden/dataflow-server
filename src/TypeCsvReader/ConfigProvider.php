<?php

/**
 * This file is generated by SlayerBirden\DFCodeGeneration
 */

declare(strict_types=1);

namespace SlayerBirden\DataFlowServer\TypeCsvReader;

use Psr\Log\LoggerInterface;
use SlayerBirden\DataFlowServer\Authentication\Middleware\TokenMiddleware;
use SlayerBirden\DataFlowServer\Doctrine\Persistence\EntityManagerRegistry;
use SlayerBirden\DataFlowServer\Domain\Middleware\SetOwnerFilterMiddleware;
use SlayerBirden\DataFlowServer\Domain\Middleware\SetOwnerMiddleware;
use SlayerBirden\DataFlowServer\Domain\Middleware\ValidateOwnerMiddleware;
use SlayerBirden\DataFlowServer\TypeCsvReader\Controller\AddCsvReaderAction;
use SlayerBirden\DataFlowServer\TypeCsvReader\Controller\DeleteCsvReaderAction;
use SlayerBirden\DataFlowServer\TypeCsvReader\Controller\GetCsvReaderAction;
use SlayerBirden\DataFlowServer\TypeCsvReader\Controller\GetCsvReadersAction;
use SlayerBirden\DataFlowServer\TypeCsvReader\Controller\UpdateCsvReaderAction;
use SlayerBirden\DataFlowServer\TypeCsvReader\Factory\CsvReaderHydratorFactory;
use SlayerBirden\DataFlowServer\TypeCsvReader\Factory\CsvReaderRepositoryFactory;
use SlayerBirden\DataFlowServer\TypeCsvReader\Factory\CsvReaderResourceMiddlewareFactory;
use SlayerBirden\DataFlowServer\TypeCsvReader\Factory\InputFilterMiddlewareFactory;
use SlayerBirden\DataFlowServer\Zend\InputFilter\ProxyFilterManagerFactory;
use Zend\Expressive\Helper\BodyParams\BodyParamsMiddleware;
use Zend\ServiceManager\AbstractFactory\ConfigAbstractFactory;

final class ConfigProvider
{
    public function __invoke(): array
    {
        return [
            'doctrine' => $this->getDoctrineConfig(),
            ConfigAbstractFactory::class => $this->getConfigAbstractFactoryConfig(),
            'dependencies' => $this->getDependenciesConfig(),
            'input_filter_specs' => [
                'CsvReaderInputFilter' => $this->getCsvReaderInputFilterSpec(),
            ],
            'routes' => $this->getRoutesConfig(),
        ];
    }

    private function getDoctrineConfig(): array
    {
        return [
            'entity_managers' => [
                'default' => [
                    'paths' => [
                        'src/TypeCsvReader/Entities',
                    ],
                ],
            ],
        ];
    }

    private function getConfigAbstractFactoryConfig(): array
    {
        return [
            AddCsvReaderAction::class => [
                EntityManagerRegistry::class,
                'CsvReaderHydrator',
                LoggerInterface::class,
            ],
            DeleteCsvReaderAction::class => [
                EntityManagerRegistry::class,
                'CsvReaderHydrator',
                LoggerInterface::class,
            ],
            GetCsvReaderAction::class => [
                'CsvReaderHydrator',
            ],
            GetCsvReadersAction::class => [
                'CsvReaderRepository',
                LoggerInterface::class,
                'CsvReaderHydrator',
            ],
            UpdateCsvReaderAction::class => [
                EntityManagerRegistry::class,
                'CsvReaderHydrator',
                LoggerInterface::class,
            ],
        ];
    }

    private function getDependenciesConfig(): array
    {
        return [
            'factories' => [
                'CsvReaderHydrator' => CsvReaderHydratorFactory::class,
                'CsvReaderInputFilter' => ProxyFilterManagerFactory::class,
                'CsvReaderInputFilterMiddleware' => InputFilterMiddlewareFactory::class,
                'CsvReaderResourceMiddleware' => CsvReaderResourceMiddlewareFactory::class,
                'CsvReaderRepository' => CsvReaderRepositoryFactory::class,
            ],
        ];
    }

    private function getCsvReaderInputFilterSpec(): array
    {
        return [
            'name' => [
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'notempty',
                    ],
                ],
            ],
            'filePath' => [
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'notempty',
                    ],
                ],
            ],
            'hasHeaderRow' => [
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'notempty',
                    ],
                ],
            ],
        ];
    }

    private function getRoutesConfig(): array
    {
        return [
            [
                'path' => '/csv_reader',
                'middleware' => [
                    TokenMiddleware::class,
                    BodyParamsMiddleware::class,
                    'CsvReaderInputFilterMiddleware',
                    SetOwnerMiddleware::class,
                    AddCsvReaderAction::class,
                ],
                'name' => 'add_csv_reader',
                'allowed_methods' => [
                    'POST',
                ],
            ],
            [
                'path' => '/csv_reader/{id:\\d+}',
                'middleware' => [
                    TokenMiddleware::class,
                    'CsvReaderResourceMiddleware',
                    ValidateOwnerMiddleware::class,
                    DeleteCsvReaderAction::class,
                ],
                'name' => 'delete_csv_reader',
                'allowed_methods' => [
                    'DELETE',
                ],
            ],
            [
                'path' => '/csv_reader/{id:\\d+}',
                'middleware' => [
                    TokenMiddleware::class,
                    'CsvReaderResourceMiddleware',
                    ValidateOwnerMiddleware::class,
                    GetCsvReaderAction::class,
                ],
                'name' => 'get_csv_reader',
                'allowed_methods' => [
                    'GET',
                ],
            ],
            [
                'path' => '/csv_readers',
                'middleware' => [
                    TokenMiddleware::class,
                    SetOwnerFilterMiddleware::class,
                    GetCsvReadersAction::class,
                ],
                'name' => 'get_csv_readers',
                'allowed_methods' => [
                    'GET',
                ],
            ],
            [
                'path' => '/csv_reader/{id:\\d+}',
                'middleware' => [
                    TokenMiddleware::class,
                    'CsvReaderResourceMiddleware',
                    ValidateOwnerMiddleware::class,
                    BodyParamsMiddleware::class,
                    'CsvReaderInputFilterMiddleware',
                    SetOwnerMiddleware::class,
                    UpdateCsvReaderAction::class,
                ],
                'name' => 'update_csv_reader',
                'allowed_methods' => [
                    'PUT',
                ],
            ],
        ];
    }
}
