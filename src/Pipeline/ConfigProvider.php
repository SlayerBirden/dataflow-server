<?php

/**
 * This file is generated by SlayerBirden\DFCodeGeneration
 */

declare(strict_types=1);

namespace SlayerBirden\DataFlowServer\Pipeline;

use Psr\Log\LoggerInterface;
use SlayerBirden\DataFlowServer\Authentication\Middleware\TokenMiddleware;
use SlayerBirden\DataFlowServer\Doctrine\Persistence\EntityManagerRegistry;
use SlayerBirden\DataFlowServer\Domain\Middleware\SetOwnerFilterMiddleware;
use SlayerBirden\DataFlowServer\Domain\Middleware\SetOwnerMiddleware;
use SlayerBirden\DataFlowServer\Domain\Middleware\ValidateOwnerMiddleware;
use SlayerBirden\DataFlowServer\Pipeline\Controller\AddPipeAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\AddPipelineAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\AddTypeAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\DeletePipeAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\DeletePipelineAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\DeleteTypeAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\GetPipeAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\GetPipelineAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\GetPipelinesAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\GetPipesAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\GetTypeAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\GetTypesAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\UpdatePipeAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\UpdatePipelineAction;
use SlayerBirden\DataFlowServer\Pipeline\Controller\UpdateTypeAction;
use SlayerBirden\DataFlowServer\Pipeline\Factory\PipelineInputFilterMiddlewareFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\PipeHydratorFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\PipeInputFilterMiddlewareFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\PipeRepositoryFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\PipeResourceMiddlewareFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\PipelineHydratorFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\PipelineRepositoryFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\PipelineResourceMiddlewareFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\PipeValidatorFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\TypeHydratorFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\TypeInputFilterMiddlewareFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\TypeRepositoryFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\TypeResourceMiddlewareFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\UpdatePipeInputFilterMiddlewareFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\UpdatePipelineInputFilterMiddlewareFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\UpdateTypeInputFilterMiddlewareFactory;
use SlayerBirden\DataFlowServer\Pipeline\Validation\PipeValidator;
use SlayerBirden\DataFlowServer\Stdlib\Middleware\TimestampableInsertMiddleware;
use SlayerBirden\DataFlowServer\Stdlib\Middleware\TimestampableUpdateMiddleware;
use SlayerBirden\DataFlowServer\Zend\InputFilter\ProxyFilterManagerFactory;
use Zend\Expressive\Helper\BodyParams\BodyParamsMiddleware;
use Zend\ServiceManager\AbstractFactory\ConfigAbstractFactory;

final class ConfigProvider
{
    public function __invoke(): array
    {
        return [
            'doctrine' => $this->getDoctrineConfig(),
            ConfigAbstractFactory::class => $this->getConfigAbstractFactoryConfig(),
            'dependencies' => $this->getDependenciesConfig(),
            'input_filter_specs' => [
                'PipeInputFilter' => $this->getPipeInputFilterSpec(),
                'UpdatePipeInputFilter' => $this->getUpdatePipeInputFilterSpec(),
                'TypeInputFilter' => $this->getTypeInputFilterSpec(),
                'UpdateTypeInputFilter' => $this->getUpdateTypeInputFilterSpec(),
                'PipelineInputFilter' => $this->getPipelineInputFilterSpec(),
                'UpdatePipelineInputFilter' => $this->getUpdatePipelineInputFilterSpec(),
            ],
            'validators' => $this->getValidatorsConfig(),
            'routes' => $this->getRoutesConfig(),
        ];
    }

    private function getDoctrineConfig(): array
    {
        return [
            'entity_managers' => [
                'default' => [
                    'paths' => [
                        'src/Pipeline/Entities',
                    ],
                ],
            ],
        ];
    }

    private function getConfigAbstractFactoryConfig(): array
    {
        return [
            AddPipeAction::class => [
                EntityManagerRegistry::class,
                'PipeHydrator',
                LoggerInterface::class,
            ],
            DeletePipeAction::class => [
                EntityManagerRegistry::class,
                'PipeHydrator',
                LoggerInterface::class,
            ],
            GetPipeAction::class => [
                'PipeHydrator',
            ],
            GetPipesAction::class => [
                'PipeRepository',
                LoggerInterface::class,
                'PipeHydrator',
            ],
            UpdatePipeAction::class => [
                EntityManagerRegistry::class,
                'PipeHydrator',
                LoggerInterface::class,
            ],
            AddTypeAction::class => [
                EntityManagerRegistry::class,
                'TypeHydrator',
                LoggerInterface::class,
            ],
            DeleteTypeAction::class => [
                EntityManagerRegistry::class,
                'TypeHydrator',
                LoggerInterface::class,
            ],
            GetTypeAction::class => [
                'TypeHydrator',
            ],
            GetTypesAction::class => [
                'TypeRepository',
                LoggerInterface::class,
                'TypeHydrator',
            ],
            UpdateTypeAction::class => [
                EntityManagerRegistry::class,
                'TypeHydrator',
                LoggerInterface::class,
            ],
            AddPipelineAction::class => [
                EntityManagerRegistry::class,
                'PipelineHydrator',
                LoggerInterface::class,
            ],
            DeletePipelineAction::class => [
                EntityManagerRegistry::class,
                'PipelineHydrator',
                LoggerInterface::class,
            ],
            GetPipelineAction::class => [
                'PipelineHydrator',
            ],
            GetPipelinesAction::class => [
                'PipelineRepository',
                LoggerInterface::class,
                'PipelineHydrator',
            ],
            UpdatePipelineAction::class => [
                EntityManagerRegistry::class,
                'PipelineHydrator',
                LoggerInterface::class,
            ],
        ];
    }

    private function getDependenciesConfig(): array
    {
        return [
            'factories' => [
                'PipeHydrator' => PipeHydratorFactory::class,
                'PipeInputFilter' => ProxyFilterManagerFactory::class,
                'UpdatePipeInputFilter' => ProxyFilterManagerFactory::class,
                'PipeInputFilterMiddleware' => PipeInputFilterMiddlewareFactory::class,
                'UpdatePipeInputFilterMiddleware' => UpdatePipeInputFilterMiddlewareFactory::class,
                'PipeResourceMiddleware' => PipeResourceMiddlewareFactory::class,
                'PipeRepository' => PipeRepositoryFactory::class,
                'TypeHydrator' => TypeHydratorFactory::class,
                'TypeInputFilter' => ProxyFilterManagerFactory::class,
                'UpdateTypeInputFilter' => ProxyFilterManagerFactory::class,
                'TypeResourceMiddleware' => TypeResourceMiddlewareFactory::class,
                'TypeInputFilterMiddleware' => TypeInputFilterMiddlewareFactory::class,
                'UpdateTypeInputFilterMiddleware' => UpdateTypeInputFilterMiddlewareFactory::class,
                'TypeRepository' => TypeRepositoryFactory::class,
                'PipelineHydrator' => PipelineHydratorFactory::class,
                'PipelineInputFilter' => ProxyFilterManagerFactory::class,
                'UpdatePipelineInputFilter' => ProxyFilterManagerFactory::class,
                'PipelineInputFilterMiddleware' => PipelineInputFilterMiddlewareFactory::class,
                'UpdatePipelineInputFilterMiddleware' => UpdatePipelineInputFilterMiddlewareFactory::class,
                'PipelineResourceMiddleware' => PipelineResourceMiddlewareFactory::class,
                'PipelineRepository' => PipelineRepositoryFactory::class,
            ],
        ];
    }

    private function getPipeInputFilterSpec(): array
    {
        return [
            'name' => [
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'notempty',
                    ],
                    [
                        'name' => 'stringLength',
                        'options' => [
                            'max' => 255,
                        ],
                    ],
                ],
            ],
            'type' => [
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'notempty',
                    ],
                ],
            ],
        ];
    }

    private function getUpdatePipeInputFilterSpec(): array
    {
        return [
            'name' => [
                'required' => false,
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'stringLength',
                        'options' => [
                            'max' => 255,
                        ],
                    ],
                ],
            ],
        ];
    }

    private function getTypeInputFilterSpec(): array
    {
        return [
            'code' => [
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'notempty',
                    ],
                    [
                        'name' => 'stringLength',
                        'options' => [
                            'max' => 255,
                        ],
                    ],
                ],
            ],
            'tablename' => [
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'notempty',
                    ],
                    [
                        'name' => 'stringLength',
                        'options' => [
                            'max' => 255,
                        ],
                    ],
                ],
            ],
        ];
    }

    private function getUpdateTypeInputFilterSpec(): array
    {
        return [
            'code' => [
                'required' => false,
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'stringLength',
                        'options' => [
                            'max' => 255,
                        ],
                    ],
                ],
            ],
            'tablename' => [
                'required' => false,
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'stringLength',
                        'options' => [
                            'max' => 255,
                        ],
                    ],
                ],
            ],
        ];
    }

    private function getPipelineInputFilterSpec(): array
    {
        return [
            'name' => [
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'notempty',
                    ],
                    [
                        'name' => 'stringLength',
                        'options' => [
                            'max' => 255,
                        ],
                    ],
                ],
            ],
            'pipes' => [
                'required' => false,
                'validators' => [
                    [
                        'name' => 'pipesValidator',
                    ],
                ],
            ],
        ];
    }

    private function getUpdatePipelineInputFilterSpec(): array
    {
        return [
            'name' => [
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'stringLength',
                        'options' => [
                            'max' => 255,
                        ],
                    ],
                ],
            ],
            'pipes' => [
                'validators' => [
                    [
                        'name' => 'pipesValidator',
                    ],
                ],
            ],
        ];
    }

    private function getRoutesConfig(): array
    {
        return [
            [
                'path' => '/pipe',
                'middleware' => [
                    TokenMiddleware::class,
                    BodyParamsMiddleware::class,
                    'PipeInputFilterMiddleware',
                    SetOwnerMiddleware::class,
                    TimestampableInsertMiddleware::class,
                    AddPipeAction::class,
                ],
                'name' => 'add_pipe',
                'allowed_methods' => [
                    'POST',
                ],
            ],
            [
                'path' => '/pipe/{id:\d+}',
                'middleware' => [
                    TokenMiddleware::class,
                    'PipeResourceMiddleware',
                    ValidateOwnerMiddleware::class,
                    DeletePipeAction::class,
                ],
                'name' => 'delete_pipe',
                'allowed_methods' => [
                    'DELETE',
                ],
            ],
            [
                'path' => '/pipe/{id:\d+}',
                'middleware' => [
                    TokenMiddleware::class,
                    'PipeResourceMiddleware',
                    ValidateOwnerMiddleware::class,
                    GetPipeAction::class,
                ],
                'name' => 'get_pipe',
                'allowed_methods' => [
                    'GET',
                ],
            ],
            [
                'path' => '/pipes',
                'middleware' => [
                    TokenMiddleware::class,
                    SetOwnerFilterMiddleware::class,
                    GetPipesAction::class,
                ],
                'name' => 'get_pipes',
                'allowed_methods' => [
                    'GET',
                ],
            ],
            [
                'path' => '/pipe/{id:\d+}',
                'middleware' => [
                    TokenMiddleware::class,
                    'PipeResourceMiddleware',
                    ValidateOwnerMiddleware::class,
                    BodyParamsMiddleware::class,
                    'UpdatePipeInputFilterMiddleware',
                    SetOwnerMiddleware::class,
                    TimestampableUpdateMiddleware::class,
                    UpdatePipeAction::class,
                ],
                'name' => 'update_pipe',
                'allowed_methods' => [
                    'PUT',
                ],
            ],
            [
                'path' => '/type',
                'middleware' => [
                    TokenMiddleware::class,
                    BodyParamsMiddleware::class,
                    'TypeInputFilterMiddleware',
                    AddTypeAction::class,
                ],
                'name' => 'add_type',
                'allowed_methods' => [
                    'POST',
                ],
            ],
            [
                'path' => '/type/{id:\w+}',
                'middleware' => [
                    TokenMiddleware::class,
                    'TypeResourceMiddleware',
                    DeleteTypeAction::class,
                ],
                'name' => 'delete_type',
                'allowed_methods' => [
                    'DELETE',
                ],
            ],
            [
                'path' => '/type/{id:\w+}',
                'middleware' => [
                    TokenMiddleware::class,
                    'TypeResourceMiddleware',
                    GetTypeAction::class,
                ],
                'name' => 'get_type',
                'allowed_methods' => [
                    'GET',
                ],
            ],
            [
                'path' => '/types',
                'middleware' => [
                    TokenMiddleware::class,
                    GetTypesAction::class,
                ],
                'name' => 'get_types',
                'allowed_methods' => [
                    'GET',
                ],
            ],
            [
                'path' => '/type/{id:\w+}',
                'middleware' => [
                    TokenMiddleware::class,
                    'TypeResourceMiddleware',
                    BodyParamsMiddleware::class,
                    'UpdateTypeInputFilterMiddleware',
                    UpdateTypeAction::class,
                ],
                'name' => 'update_type',
                'allowed_methods' => [
                    'PUT',
                ],
            ],
            [
                'path' => '/pipeline',
                'middleware' => [
                    TokenMiddleware::class,
                    BodyParamsMiddleware::class,
                    'PipelineInputFilterMiddleware',
                    SetOwnerMiddleware::class,
                    TimestampableInsertMiddleware::class,
                    AddPipelineAction::class,
                ],
                'name' => 'add_pipeline',
                'allowed_methods' => [
                    'POST',
                ],
            ],
            [
                'path' => '/pipeline/{id:\d+}',
                'middleware' => [
                    TokenMiddleware::class,
                    'PipelineResourceMiddleware',
                    ValidateOwnerMiddleware::class,
                    DeletePipelineAction::class,
                ],
                'name' => 'delete_pipeline',
                'allowed_methods' => [
                    'DELETE',
                ],
            ],
            [
                'path' => '/pipeline/{id:\d+}',
                'middleware' => [
                    TokenMiddleware::class,
                    'PipelineResourceMiddleware',
                    ValidateOwnerMiddleware::class,
                    GetPipelineAction::class,
                ],
                'name' => 'get_pipeline',
                'allowed_methods' => [
                    'GET',
                ],
            ],
            [
                'path' => '/pipelines',
                'middleware' => [
                    TokenMiddleware::class,
                    SetOwnerFilterMiddleware::class,
                    GetPipelinesAction::class,
                ],
                'name' => 'get_pipelines',
                'allowed_methods' => [
                    'GET',
                ],
            ],
            [
                'path' => '/pipeline/{id:\d+}',
                'middleware' => [
                    TokenMiddleware::class,
                    'PipelineResourceMiddleware',
                    ValidateOwnerMiddleware::class,
                    BodyParamsMiddleware::class,
                    'UpdatePipelineInputFilterMiddleware',
                    SetOwnerMiddleware::class,
                    TimestampableUpdateMiddleware::class,
                    UpdatePipelineAction::class,
                ],
                'name' => 'update_pipeline',
                'allowed_methods' => [
                    'PUT',
                ],
            ],
        ];
    }

    private function getValidatorsConfig(): array
    {
        return [
            'aliases' => [
                'pipesValidator' => PipeValidator::class,
                'pipeValidator' => PipeValidator::class,
            ],
            'factories' => [
                PipeValidator::class => PipeValidatorFactory::class,
            ],
        ];
    }
}
