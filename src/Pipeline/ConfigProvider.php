<?php

/**
 * This file is generated by SlayerBirden\DFCodeGeneration
 */

declare(strict_types=1);

namespace SlayerBirden\DataFlowServer\Pipeline;

use Psr\Log\LoggerInterface;
use SlayerBirden\DataFlowServer\Authentication\Middleware\TokenMiddleware;
use SlayerBirden\DataFlowServer\Doctrine\Persistence\EntityManagerRegistry;
use SlayerBirden\DataFlowServer\Domain\Middleware\SetOwnerMiddleware;
use SlayerBirden\DataFlowServer\Pipeline\Controller\AddPipeAction;
use SlayerBirden\DataFlowServer\Pipeline\Factory\InputFilterMiddlewareFactory;
use SlayerBirden\DataFlowServer\Pipeline\Factory\PipeHydratorFactory;
use SlayerBirden\DataFlowServer\Stdlib\Middleware\TimestampableInsertMiddleware;
use SlayerBirden\DataFlowServer\Zend\InputFilter\ProxyFilterManagerFactory;
use Zend\Expressive\Helper\BodyParams\BodyParamsMiddleware;
use Zend\ServiceManager\AbstractFactory\ConfigAbstractFactory;

final class ConfigProvider
{
    public function __invoke(): array
    {
        return [
            'doctrine' => $this->getDoctrineConfig(),
            ConfigAbstractFactory::class => $this->getConfigAbstractFactoryConfig(),
            'dependencies' => $this->getDependenciesConfig(),
            'input_filter_specs' => [
                'PipeInputFilter' => $this->getPipeInputFilterSpec(),
            ],
            'routes' => $this->getRoutesConfig(),
        ];
    }

    public function getDoctrineConfig(): array
    {
        return [
            'entity_managers' => [
                'default' => [
                    'paths' => [
                        'src/Pipeline/Entities',
                    ],
                ],
            ],
        ];
    }

    public function getConfigAbstractFactoryConfig(): array
    {
        return [
            AddPipeAction::class => [
                EntityManagerRegistry::class,
                'PipeHydrator',
                LoggerInterface::class,
            ],
        ];
    }

    public function getDependenciesConfig(): array
    {
        return [
            'factories' => [
                'PipeHydrator' => PipeHydratorFactory::class,
                'PipeInputFilter' => ProxyFilterManagerFactory::class,
                'PipeInputFilterMiddleware' => InputFilterMiddlewareFactory::class,
            ],
        ];
    }

    public function getPipeInputFilterSpec(): array
    {
        return [
            'name' => [
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'notempty',
                    ],
                    [
                        'name' => 'stringLength',
                        'options' => [
                            'max' => 255,
                        ],
                    ],
                ],
            ],
            'type' => [
                'filters' => [
                    [
                        'name' => 'stringtrim',
                    ],
                ],
                'validators' => [
                    [
                        'name' => 'notempty',
                    ],
                ],
            ],
        ];
    }

    public function getRoutesConfig(): array
    {
        return [
            [
                'path' => '/pipe',
                'middleware' => [
                    TokenMiddleware::class,
                    BodyParamsMiddleware::class,
                    'PipeInputFilterMiddleware',
                    SetOwnerMiddleware::class,
                    TimestampableInsertMiddleware::class,
                    AddPipeAction::class,
                ],
                'name' => 'add_pipe',
                'allowed_methods' => [
                    'POST',
                ],
            ],
        ];
    }
}
