<?php

/**
 * This file is generated by SlayerBirden\DFCodeGeneration
 */

declare(strict_types=1);

namespace codecept\pipeline\pipeline;

use Codeception\Util\HttpCode;
use SlayerBirden\DataFlowServer\Domain\Entities\User;
use SlayerBirden\DataFlowServer\Pipeline\Entities\Pipeline;
use codecept\ApiTester;

class GetsCest
{
    public function _before(ApiTester $I): void
    {
        $user = $I->grabEntityFromRepository(User::class, ['id' => 1]);
        $I->haveInRepository(Pipeline::class, [
            'name' => 'alias',
            'createdAt' => new \DateTime('2014-02-08T04:16:01+00:00'),
            'updatedAt' => new \DateTime('2003-12-23T22:44:23+00:00'),
            'owner' => $user,
        ]);
        $I->haveInRepository(Pipeline::class, [
            'name' => 'Quis cumque asperiores suscipit in possimus aut modi.',
            'createdAt' => new \DateTime('1979-01-02T14:26:47+00:00'),
            'updatedAt' => new \DateTime('1984-04-29T09:05:02+00:00'),
            'owner' => $user,
        ]);
        $I->haveInRepository(Pipeline::class, [
            'name' => 'pariatur',
            'createdAt' => new \DateTime('1980-05-26T02:56:15+00:00'),
            'updatedAt' => new \DateTime('1979-11-10T06:05:02+00:00'),
            'owner' => $user,
        ]);
        $I->haveInRepository(Pipeline::class, [
            'name' => 'quo',
            'createdAt' => new \DateTime('1978-09-12T19:00:20+00:00'),
            'updatedAt' => new \DateTime('1995-10-20T23:57:06+00:00'),
            'owner' => $user,
        ]);
        $I->haveInRepository(Pipeline::class, [
            'name' => 'inventore',
            'createdAt' => new \DateTime('2001-11-16T08:57:12+00:00'),
            'updatedAt' => new \DateTime('2002-10-20T22:46:58+00:00'),
            'owner' => $user,
        ]);
        $I->haveInRepository(Pipeline::class, [
            'name' => 'dolorem',
            'createdAt' => new \DateTime('1985-03-03T17:20:56+00:00'),
            'updatedAt' => new \DateTime('1999-11-27T03:44:42+00:00'),
            'owner' => $user,
        ]);
        $I->haveInRepository(Pipeline::class, [
            'name' => 'et',
            'createdAt' => new \DateTime('1982-09-09T04:58:47+00:00'),
            'updatedAt' => new \DateTime('1989-08-05T23:35:46+00:00'),
            'owner' => $user,
        ]);
        $I->haveInRepository(Pipeline::class, [
            'name' => 'Et esse sed aut nostrum.',
            'createdAt' => new \DateTime('1984-06-19T19:27:04+00:00'),
            'updatedAt' => new \DateTime('1991-07-13T16:15:31+00:00'),
            'owner' => $user,
        ]);
        $I->haveInRepository(Pipeline::class, [
            'name' => 'Aspernatur id vel quae impedit ad.',
            'createdAt' => new \DateTime('1978-04-16T00:35:16+00:00'),
            'updatedAt' => new \DateTime('2009-01-15T15:18:18+00:00'),
            'owner' => $user,
        ]);
        $I->haveInRepository(Pipeline::class, [
            'name' => 'deleniti',
            'createdAt' => new \DateTime('1973-10-26T05:39:28+00:00'),
            'updatedAt' => new \DateTime('2000-10-01T02:05:20+00:00'),
            'owner' => $user,
        ]);
        $I->haveInRepository(Pipeline::class, [
            'name' => 'Rerum tempora ea aut minus suscipit.',
            'createdAt' => new \DateTime('1995-09-10T10:47:21+00:00'),
            'updatedAt' => new \DateTime('2012-12-26T21:29:17+00:00'),
            'owner' => $user,
        ]);
    }

    public function getAllPipelines(ApiTester $I): void
    {
        $I->wantTo('get all pipelines');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/pipelines?l=100');
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 11,
            ]
        ]);
    }

    public function getSecondPagePipelines(ApiTester $I): void
    {
        $I->wantTo('get second page pipelines');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/pipelines?p=2');
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 11,
            ]
        ]);
    }

    public function getFilteredPipelines(ApiTester $I): void
    {
        $I->wantTo('get pipelines filtered by name:Asper');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/pipelines?f[name]=Asper');
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 2,
            ]
        ]);
    }

    public function getSortedPipelines(ApiTester $I): void
    {
        $I->wantTo('get pipelines sorted by createdAt:ASC');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/pipelines?s[createdAt]=ASC');
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 11,
                'pipelines' => [
                    [
                        'name' => 'deleniti',
                        'created_at' => '1973-10-26T05:39:28+00:00',
                        'updated_at' => '2000-10-01T02:05:20+00:00',
                    ],
                    [
                        'name' => 'Aspernatur id vel quae impedit ad.',
                        'created_at' => '1978-04-16T00:35:16+00:00',
                        'updated_at' => '2009-01-15T15:18:18+00:00',
                    ],
                    [
                        'name' => 'quo',
                        'created_at' => '1978-09-12T19:00:20+00:00',
                        'updated_at' => '1995-10-20T23:57:06+00:00',
                    ],
                    [
                        'name' => 'Quis cumque asperiores suscipit in possimus aut modi.',
                        'created_at' => '1979-01-02T14:26:47+00:00',
                        'updated_at' => '1984-04-29T09:05:02+00:00',
                    ],
                    [
                        'name' => 'pariatur',
                        'created_at' => '1980-05-26T02:56:15+00:00',
                        'updated_at' => '1979-11-10T06:05:02+00:00',
                    ],
                    [
                        'name' => 'et',
                        'created_at' => '1982-09-09T04:58:47+00:00',
                        'updated_at' => '1989-08-05T23:35:46+00:00',
                    ],
                    [
                        'name' => 'Et esse sed aut nostrum.',
                        'created_at' => '1984-06-19T19:27:04+00:00',
                        'updated_at' => '1991-07-13T16:15:31+00:00',
                    ],
                    [
                        'name' => 'dolorem',
                        'created_at' => '1985-03-03T17:20:56+00:00',
                        'updated_at' => '1999-11-27T03:44:42+00:00',
                    ],
                    [
                        'name' => 'Rerum tempora ea aut minus suscipit.',
                        'created_at' => '1995-09-10T10:47:21+00:00',
                        'updated_at' => '2012-12-26T21:29:17+00:00',
                    ],
                    [
                        'name' => 'inventore',
                        'created_at' => '2001-11-16T08:57:12+00:00',
                        'updated_at' => '2002-10-20T22:46:58+00:00',
                    ],
                ],
            ]
        ]);
    }

    public function getNoResultsFilteredPipelines(ApiTester $I): void
    {
        $I->wantTo('get pipelines filtered by name:Debitis dolorem fugit cum ut.');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/pipelines?f[name]=Debitis dolorem fugit cum ut.');
        $I->seeResponseCodeIs(HttpCode::NOT_FOUND);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 0,
            ]
        ]);
    }

    public function getWrongFilteredPipelines(ApiTester $I): void
    {
        $I->wantTo('get pipelines filtered by wrong filter name:Asper');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/pipelines?f[et]=Totam magnam.');
        $I->seeResponseCodeIs(HttpCode::BAD_REQUEST);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 0,
            ]
        ]);
    }
}
