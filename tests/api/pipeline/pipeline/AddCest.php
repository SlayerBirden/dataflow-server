<?php

/**
 * This file is generated by SlayerBirden\DFCodeGeneration
 */

declare(strict_types=1);

namespace codecept\pipeline\pipeline;

use Codeception\Util\HttpCode;
use SlayerBirden\DataFlowServer\Domain\Entities\User;
use SlayerBirden\DataFlowServer\Pipeline\Entities\Pipe;
use SlayerBirden\DataFlowServer\Pipeline\Entities\Pipeline;
use codecept\ApiTester;
use SlayerBirden\DataFlowServer\Pipeline\Entities\Type;

class AddCest
{
    /**
     * @var int
     */
    private $pipeId;

    public function _before(ApiTester $I)
    {
        $I->haveInRepository(Type::class, [
            'code' => 'test_1',
            'tablename' => 'test_1',
        ]);
        $type = $I->grabEntityFromRepository(Type::class, ['code' => 'test_1']);
        $user = $I->grabEntityFromRepository(User::class, ['id' => 1]);
        $this->pipeId = $I->haveInRepository(Pipe::class, [
            'name' => 'aut',
            'createdAt' => new \DateTime('1998-10-23T19:48:26+00:00'),
            'updatedAt' => new \DateTime('1985-01-22T00:06:22+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
    }

    public function addPipeline(ApiTester $I): void
    {
        $I->wantTo('successfully create pipeline');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendPOST('/pipeline', [
            'name' => 'doloremque',
            'pipes' => [
                $this->pipeId
            ],
        ]);
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'pipeline' => [
                    'name' => 'doloremque',
                    'pipes' => [
                        [
                            'name' => 'aut'
                        ],
                    ],
                ],
            ],
        ]);
    }

    public function addInvalidPipeline(ApiTester $I): void
    {
        $I->wantTo('attempt to create invalid pipeline');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendPOST('/pipeline', [
            'name' => 'Iure nulla dolorum quasi mollitia. Hic voluptatem quam dolorum quaerat delectus. Modi consequatur sint dolor aperiam omnis. Facere iure laborum earum aut. Aut suscipit molestiae quasi beatae voluptate. Fugit quaerat in omnis ea quis unde dolorum. Et repudiandae natus sint. Veniam qui molestiae doloremque qui sapiente dolorum rerum. Aperiam ab tempora repudiandae quod explicabo quo.',
            'createdAt' => 'quod',
            'updatedAt' => 'ex',
        ]);
        $I->seeResponseCodeIs(HttpCode::BAD_REQUEST);
    }

    public function mutateExistingPipeline(ApiTester $I): void
    {
        $I->wantTo('attempt to mutate existing record by providing ID');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendPOST('/pipeline', [
            'name' => 'doloremque',
            'pipes' => [],
        ]);

        $entities = $I->grabEntitiesFromRepository(Pipeline::class);
        $lastId = (end($entities))->getId();

        $I->sendPOST('/pipeline', [
            'id' => $lastId,
            'name' => 'doloremque',
            'pipes' => [],
        ]);

        $entities = $I->grabEntitiesFromRepository(Pipeline::class);
        $newLastId = (end($entities))->getId();

        $I->assertNotEquals($lastId, $newLastId);
    }
}
