<?php

/**
 * This file is generated by SlayerBirden\DFCodeGeneration
 */

declare(strict_types=1);

namespace codecept\pipeline\type;

use Codeception\Util\HttpCode;
use SlayerBirden\DataFlowServer\Pipeline\Entities\Type;
use codecept\ApiTester;

class GetsCest
{
    public function _before(ApiTester $I): void
    {
        $I->haveInRepository(Type::class, [
            'code' => 'rerum',
            'tablename' => 'Neque fuga molestiae commodi voluptas dolorum ea sapiente.',
        ]);
        $I->haveInRepository(Type::class, [
            'code' => 'Blanditiis ad sunt eos molestias. Et quas debitis beatae aut.',
            'tablename' => 'debitis',
        ]);
        $I->haveInRepository(Type::class, [
            'code' => 'Omnis nihil perspiciatis laudantium nostrum.',
            'tablename' => 'Ipsa vel inventore quis impedit.',
        ]);
        $I->haveInRepository(Type::class, [
            'code' => 'nemo',
            'tablename' => 'odit',
        ]);
        $I->haveInRepository(Type::class, [
            'code' => 'Dignissimos earum aliquam numquam mollitia eum id et.',
            'tablename' => 'Ab sed sit architecto quos at.',
        ]);
        $I->haveInRepository(Type::class, [
            'code' => 'officiis',
            'tablename' => 'mollitia',
        ]);
        $I->haveInRepository(Type::class, [
            'code' => 'et',
            'tablename' => 'velit',
        ]);
        $I->haveInRepository(Type::class, [
            'code' => 'rem',
            'tablename' => 'cumque',
        ]);
        $I->haveInRepository(Type::class, [
            'code' => 'Voluptas et iusto natus error aut sequi.',
            'tablename' => 'dolores',
        ]);
        $I->haveInRepository(Type::class, [
            'code' => 'Dolores velit quod corporis cumque consequatur minus tempora.',
            'tablename' => 'Eligendi nihil sint ratione repellat debitis animi excepturi.',
        ]);
        $I->haveInRepository(Type::class, [
            'code' => 'est',
            'tablename' => 'incidunt',
        ]);
    }

    public function getAllTypes(ApiTester $I): void
    {
        $I->wantTo('get all types');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/types?l=100');
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 11,
            ]
        ]);
    }

    public function getSecondPageTypes(ApiTester $I): void
    {
        $I->wantTo('get second page types');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/types?p=2');
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 11,
            ]
        ]);
    }

    public function getFilteredTypes(ApiTester $I): void
    {
        $I->wantTo('get types filtered by tablename:debitis');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/types?f[tablename]=debitis');
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 2,
            ]
        ]);
    }

    public function getSortedTypes(ApiTester $I): void
    {
        $I->wantTo('get types sorted by code:DESC');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/types?s[code]=DESC');
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 11,
                'types' => [
                    [
                        'code' => 'Voluptas et iusto natus error aut sequi.',
                        'tablename' => 'dolores',
                    ],
                    [
                        'code' => 'rerum',
                        'tablename' => 'Neque fuga molestiae commodi voluptas dolorum ea sapiente.',
                    ],
                    [
                        'code' => 'rem',
                        'tablename' => 'cumque',
                    ],
                    [
                        'code' => 'Omnis nihil perspiciatis laudantium nostrum.',
                        'tablename' => 'Ipsa vel inventore quis impedit.',
                    ],
                    [
                        'code' => 'officiis',
                        'tablename' => 'mollitia',
                    ],
                    [
                        'code' => 'nemo',
                        'tablename' => 'odit',
                    ],
                    [
                        'code' => 'et',
                        'tablename' => 'velit',
                    ],
                    [
                        'code' => 'est',
                        'tablename' => 'incidunt',
                    ],
                    [
                        'code' => 'Dolores velit quod corporis cumque consequatur minus tempora.',
                        'tablename' => 'Eligendi nihil sint ratione repellat debitis animi excepturi.',
                    ],
                    [
                        'code' => 'Dignissimos earum aliquam numquam mollitia eum id et.',
                        'tablename' => 'Ab sed sit architecto quos at.',
                    ],
                ],
            ]
        ]);
    }

    public function getNoResultsFilteredTypes(ApiTester $I): void
    {
        $I->wantTo('get types filtered by tablename:Quae quasi quae id quos ipsa.');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/types?f[tablename]=Quaequasiquaeidquosipsa');
        $I->seeResponseCodeIs(HttpCode::NOT_FOUND);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 0,
            ]
        ]);
    }

    public function getWrongFilteredTypes(ApiTester $I): void
    {
        $I->wantTo('get types filtered by wrong filter tablename:debitis');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/types?f[et]=Molestiae vel.');
        $I->seeResponseCodeIs(HttpCode::BAD_REQUEST);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 0,
            ]
        ]);
    }
}
