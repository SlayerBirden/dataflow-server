<?php

/**
 * This file is generated by SlayerBirden\DFCodeGeneration
 */

declare(strict_types=1);

namespace codecept\pipeline\pipe;

use Codeception\Util\HttpCode;
use SlayerBirden\DataFlowServer\Domain\Entities\User;
use SlayerBirden\DataFlowServer\Pipeline\Entities\Pipe;
use codecept\ApiTester;
use SlayerBirden\DataFlowServer\Pipeline\Entities\Type;

class UpdateCest
{
    public function _before(ApiTester $I): void
    {
        $I->haveInRepository(Type::class, [
            'code' => 'test_1',
            'tablename' => 'test_1',
        ]);
        $type = $I->grabEntityFromRepository(Type::class, ['code' => 'test_1']);
        $user = $I->grabEntityFromRepository(User::class, ['id' => 1]);
        $I->haveInRepository(Pipe::class, [
            'name' => 'aut',
            'createdAt' => new \DateTime('1998-10-23T19:48:26+00:00'),
            'updatedAt' => new \DateTime('1985-01-22T00:06:22+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
    }

    public function updatePipe(ApiTester $I): void
    {
        $I->wantTo('successfully update pipe');
        $I->haveHttpHeader('Content-Type', 'application/json');

        $I->sendPUT('/pipe/1', [
            'name' => 'qui',
        ]);
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'pipe' => [
                    'id' => 1,
                    'name' => 'qui',
                ],
            ],
        ]);
    }

    public function updateNonExistingPipe(ApiTester $I): void
    {
        $I->wantTo('update non-existing pipe');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendPUT('/pipe/0', []);
        $I->seeResponseCodeIs(HttpCode::NOT_FOUND);
        $I->seeResponseContainsJson([
            'data' => [
                'pipe' => null
            ]
        ]);
    }
}
