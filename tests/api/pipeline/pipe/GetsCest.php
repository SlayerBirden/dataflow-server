<?php

/**
 * This file is generated by SlayerBirden\DFCodeGeneration
 */

declare(strict_types=1);

namespace codecept\pipeline\pipe;

use Codeception\Util\HttpCode;
use SlayerBirden\DataFlowServer\Domain\Entities\User;
use SlayerBirden\DataFlowServer\Pipeline\Entities\Pipe;
use codecept\ApiTester;
use SlayerBirden\DataFlowServer\Pipeline\Entities\Type;

class GetsCest
{
    public function _before(ApiTester $I): void
    {
        $I->haveInRepository(Type::class, [
            'code' => 'test_1',
            'tablename' => 'test_1',
        ]);
        $type = $I->grabEntityFromRepository(Type::class, ['code' => 'test_1']);

        $user = $I->grabEntityFromRepository(User::class, ['id' => 1]);
        $I->haveInRepository(Pipe::class, [
            'name' => 'dolorem',
            'createdAt' => new \DateTime('2012-05-30T06:57:36+00:00'),
            'updatedAt' => new \DateTime('1977-05-28T06:39:00+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
        $I->haveInRepository(Pipe::class, [
            'name' => 'aut',
            'createdAt' => new \DateTime('2017-10-19T19:07:26+00:00'),
            'updatedAt' => new \DateTime('2016-12-27T03:53:15+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
        $I->haveInRepository(Pipe::class, [
            'name' => 'dicta',
            'createdAt' => new \DateTime('2013-09-12T11:21:37+00:00'),
            'updatedAt' => new \DateTime('1994-07-18T13:34:25+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
        $I->haveInRepository(Pipe::class, [
            'name' => 'molestiae',
            'createdAt' => new \DateTime('1991-05-04T16:14:33+00:00'),
            'updatedAt' => new \DateTime('2016-09-23T02:12:05+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
        $I->haveInRepository(Pipe::class, [
            'name' => 'ut',
            'createdAt' => new \DateTime('2008-07-20T10:03:18+00:00'),
            'updatedAt' => new \DateTime('2003-11-25T07:18:31+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
        $I->haveInRepository(Pipe::class, [
            'name' => 'Aut deleniti autem libero velit id architecto sed.',
            'createdAt' => new \DateTime('2006-06-22T23:15:59+00:00'),
            'updatedAt' => new \DateTime('1976-06-01T15:00:49+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
        $I->haveInRepository(Pipe::class, [
            'name' => 'error',
            'createdAt' => new \DateTime('2018-05-24T22:36:21+00:00'),
            'updatedAt' => new \DateTime('1990-05-05T19:29:21+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
        $I->haveInRepository(Pipe::class, [
            'name' => 'velit',
            'createdAt' => new \DateTime('1972-05-25T02:11:02+00:00'),
            'updatedAt' => new \DateTime('1974-01-11T11:59:05+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
        $I->haveInRepository(Pipe::class, [
            'name' => 'non',
            'createdAt' => new \DateTime('2001-11-27T15:49:37+00:00'),
            'updatedAt' => new \DateTime('2011-09-29T06:55:43+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
        $I->haveInRepository(Pipe::class, [
            'name' => 'Voluptas ad dolore deserunt ex voluptatem.',
            'createdAt' => new \DateTime('2013-11-30T01:51:49+00:00'),
            'updatedAt' => new \DateTime('1986-01-25T08:47:42+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
        $I->haveInRepository(Pipe::class, [
            'name' => 'Aperiam ut corrupti vel enim aut doloremque aut.',
            'createdAt' => new \DateTime('2017-05-01T15:46:57+00:00'),
            'updatedAt' => new \DateTime('1978-08-11T19:56:37+00:00'),
            'owner' => $user,
            'type' => $type,
        ]);
    }

    public function getAllPipes(ApiTester $I): void
    {
        $I->wantTo('get all pipes');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/pipes?l=100');
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 11,
            ]
        ]);
    }

    public function getSecondPagePipes(ApiTester $I): void
    {
        $I->wantTo('get second page pipes');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/pipes?p=2');
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 11,
            ]
        ]);
    }

    public function getFilteredPipes(ApiTester $I): void
    {
        $I->wantTo('get pipes filtered by name:Aut d');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/pipes?f[name]=Aut d');
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 2,
            ]
        ]);
    }

    public function getSortedPipes(ApiTester $I): void
    {
        $I->wantTo('get pipes sorted by updatedAt:DESC');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/pipes?s[updatedAt]=DESC');
        $I->seeResponseCodeIs(HttpCode::OK);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 11,
                'pipes' => [
                    [
                        'name' => 'aut',
                        'created_at' => '2017-10-19T19:07:26+00:00',
                        'updated_at' => '2016-12-27T03:53:15+00:00',
                    ],
                    [
                        'name' => 'molestiae',
                        'created_at' => '1991-05-04T16:14:33+00:00',
                        'updated_at' => '2016-09-23T02:12:05+00:00',
                    ],
                    [
                        'name' => 'non',
                        'created_at' => '2001-11-27T15:49:37+00:00',
                        'updated_at' => '2011-09-29T06:55:43+00:00',
                    ],
                    [
                        'name' => 'ut',
                        'created_at' => '2008-07-20T10:03:18+00:00',
                        'updated_at' => '2003-11-25T07:18:31+00:00',
                    ],
                    [
                        'name' => 'dicta',
                        'created_at' => '2013-09-12T11:21:37+00:00',
                        'updated_at' => '1994-07-18T13:34:25+00:00',
                    ],
                    [
                        'name' => 'error',
                        'created_at' => '2018-05-24T22:36:21+00:00',
                        'updated_at' => '1990-05-05T19:29:21+00:00',
                    ],
                    [
                        'name' => 'Voluptas ad dolore deserunt ex voluptatem.',
                        'created_at' => '2013-11-30T01:51:49+00:00',
                        'updated_at' => '1986-01-25T08:47:42+00:00',
                    ],
                    [
                        'name' => 'Aperiam ut corrupti vel enim aut doloremque aut.',
                        'created_at' => '2017-05-01T15:46:57+00:00',
                        'updated_at' => '1978-08-11T19:56:37+00:00',
                    ],
                    [
                        'name' => 'dolorem',
                        'created_at' => '2012-05-30T06:57:36+00:00',
                        'updated_at' => '1977-05-28T06:39:00+00:00',
                    ],
                    [
                        'name' => 'Aut deleniti autem libero velit id architecto sed.',
                        'created_at' => '2006-06-22T23:15:59+00:00',
                        'updated_at' => '1976-06-01T15:00:49+00:00',
                    ],
                ],
            ]
        ]);
    }

    public function getNoResultsFilteredPipes(ApiTester $I): void
    {
        $I->wantTo('get pipes filtered by name:Qui dolor a quisquam ut.');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/pipes?f[name]=Qui dolor a quisquam ut.');
        $I->seeResponseCodeIs(HttpCode::NOT_FOUND);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 0,
            ]
        ]);
    }

    public function getWrongFilteredPipes(ApiTester $I): void
    {
        $I->wantTo('get pipes filtered by wrong filter name:Aut d');
        $I->haveHttpHeader('Content-Type', 'application/json');
        $I->sendGET('/pipes?f[magni]=Placeat id et.');
        $I->seeResponseCodeIs(HttpCode::BAD_REQUEST);
        $I->seeResponseContainsJson([
            'data' => [
                'count' => 0,
            ]
        ]);
    }
}
